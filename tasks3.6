{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "81c0aa77",
   "metadata": {},
   "source": [
    "# 3.6 Обязательные к выполнению задачи (уровень Junior-)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "017dfe0c",
   "metadata": {},
   "source": [
    "## 1. Welcome to Python\n",
    "Дано: имя и фамилия.\n",
    "\n",
    "Задание: написать программу, которая будет приветствовать нового человека в мире Python. Текст приветсвия: Hello NAME SURNAME! You just delved into Python. Great start!\n",
    "\n",
    "Пример: Hello Ibrahim Petrov! You just delved into Python. Great start!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f68d8617",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter name: Max\n",
      "Then enter surname: Gora\n",
      "Hello Max Gora! You just delved into Python. Great start!\n"
     ]
    }
   ],
   "source": [
    "name = input(\"Enter name: \")\n",
    "surname = input(\"Then enter surname: \")\n",
    "print(f\"Hello {name} {surname}! You just delved into Python. Great start!\") #выводим через f-строку результат"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e621bbc",
   "metadata": {},
   "source": [
    "## 2. Python art\n",
    "Дано: маркер (символ) и толщина фигуры.\n",
    "\n",
    "Задание: написать программу, которая будет отображать заданную фигуру.\n",
    "\n",
    "Пример: Маркер = A, толщина 5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "1a394d91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the thickness of a symbol2\n",
      "    AA    \n",
      "  AA  AA  \n",
      "AA      AA\n",
      "AAAAAAAAAA\n",
      "AA      AA\n"
     ]
    }
   ],
   "source": [
    "thickness = int(input(\"Enter the thickness of a symbol \"))\n",
    "c = 'A'\n",
    "# можно сделать для произвольной буквы, но понадобятся словари, которые мы пока не проходили...\n",
    "print(\"  \" * thickness + c * thickness + \"  \" * thickness)\n",
    "print(\" \" * thickness + c * thickness + \" \" * thickness + c * thickness + \" \" * thickness)\n",
    "print(c * thickness  + \"   \" * thickness + c * thickness )\n",
    "print(c * (thickness * 5))\n",
    "print(c * thickness + \"   \" * thickness + c * thickness)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55ec69af",
   "metadata": {},
   "source": [
    "## 3. Заголовок\n",
    "Дано: текст любой длины.\n",
    "\n",
    "Задание: написать программу, которая выведет заголовок, используя заданный текст. Подсказка используйте метод title.\n",
    "\n",
    "Пример: text = 'hello world'; результат = Hello World\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "562399aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hi gays and girls!\n",
      "Hi Gays And Girls!\n"
     ]
    }
   ],
   "source": [
    "text = input()\n",
    "print(text.title()) # title делает первую букву каждого слова строки заглавной"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acc1bacd",
   "metadata": {},
   "source": [
    "## 4. Форматированный вывод денежной суммы\n",
    "Дано: денежная сумма (amount > 0).\n",
    "\n",
    "Задание: написать программу, которая распечатает число в принятом денежном формате XXX,XXX.XX.\n",
    "\n",
    "Пример: amount = 100500.157; результат = 100,500.16"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "d684b9b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the summ: 123456.23\n",
      "123,456.23\n"
     ]
    }
   ],
   "source": [
    "amount = float(input(\"Enter the summ: \"))\n",
    "print('{0:,}'.format(amount)) # применяем возможности строкового метода format"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "746e5444",
   "metadata": {},
   "source": [
    "## [Junior] 5. Дизайнер ковриков\n",
    "Дизайнер составил шаблон домашних ковриков. Для массового выпуска ковриков ему нужно уметь быстро составлять макет произвольного размера. Известно, что длина коврика всегда больше в 3 раза чем его ширина (W = 3 * H).\n",
    "\n",
    "Дано: ширина коврика.\n",
    "\n",
    "Задание: написать программу, которая будет составлять макет коврика для его дальнейшего производства.\n",
    "\n",
    "Примеры:\n",
    "\n",
    "Size: 7 x 21 ---------.|.--------- ------.|..|..|.------ ---.|..|..|..|..|.--- -------WELCOME------- ---.|..|..|..|..|.--- ------.|..|..|.------ ---------.|.--------- Size: 11 x 33 ---------------.|.--------------- ------------.|..|..|.------------ ---------.|..|..|..|..|.--------- ------.|..|..|..|..|..|..|.------ ---.|..|..|..|..|..|..|..|..|.--- -------------WELCOME------------- ---.|..|..|..|..|..|..|..|..|.--- ------.|..|..|..|..|..|..|.------ ---------.|..|..|..|..|.--------- ------------.|..|..|.------------ ---------------.|.---------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "41fb3734",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the height of cover: 5\n",
      "Enter custom text: C++ is the best programming language\n",
      "---------------------------------------------.|.---------------------------------------------\n",
      "------------------------------------------.|..|..|.------------------------------------------\n",
      "-----------------------------C++ is the best programming language----------------------------\n",
      "------------------------------------------.|..|..|.------------------------------------------\n",
      "---------------------------------------------.|.---------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "h = int(input(\"Enter the height of cover: \"))\n",
    "text = input(\"Enter custom text: \") # добавим в программу возможность выводить текст заказчика...\n",
    "w = H * 3\n",
    "\n",
    "#печатаем верхнюю часть ковра, увеличивая кол-во верт. палок используя range с трёмя параметрами\n",
    "for stick_count in range(1, h, 2):\n",
    "    print(('.|.' * stick_count).center(w ,'-')) \n",
    "    # строковый метод center расширяет строку до указанного в W значения с помощью символа из второго переданного аргумента\n",
    "#печатаем пользовательский текст\n",
    "print(text.center(w ,'-'))\n",
    "#печатаем нижнюю часть ковра, уменьшая кол-во верт. палок\n",
    "for stick_count in range(h-2, 0, -2):\n",
    "    print(('.|.' * stick_count).center(w ,'-'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d484beb",
   "metadata": {},
   "source": [
    "## [Junior+] 6. Произведение цифр\n",
    "Дано: целое число.\n",
    "\n",
    "Задание: написать программу, которая перемножит все цифры заданного числа (0 - исключить).\n",
    "\n",
    "Примеры: 1) value = 123405, результат = 120 2) value = 999, результат = 729 3) value = 1000, результат = 1 4) value = 1111, результат = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "b1f2b89b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the number, please! 1234\n",
      "The total of number's chars is 24\n"
     ]
    }
   ],
   "source": [
    "num = input(\"Enter the number, please! \") \n",
    "value = 1 # изначально берём единицу, т.к. если взять 0, то умножение не имеет смысла\n",
    "for char in num: # для каждой цифры (если она не 0) перемножить на имеющееся произведение\n",
    "    if char != \"0\": \n",
    "        value *= int(char)\n",
    "print(f\"The total of number's chars is {value}\") # вывести результат f-строкой"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
